service: tic-tac-toe-api

plugins:
  - serverless-websockets-plugin

custom:
  resourcePrefix: ${self:service}-${self:provider.stage}

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'} # Set the default stage used. Default is dev
  region: us-west-2
  iamRoleStatements:
   - Effect: "Allow"
     Action: "s3:*"
     Resource: "arn:aws:s3:::${self:custom.resourcePrefix}/*"
   - Effect: "Allow"
     Action: "sqs:CreateQueue"
     # allow the service to create queues with names like "tic-tac-toe-api-dev*"
     Resource: "arn:aws:sqs:*:*:${self:custom.resourcePrefix}*"
   - Effect: "Allow"
     Action: "sns:Publish"
     Resource: "arn:aws:sns:*:*:*"
  environment:
    RESOURCE_PREFIX: ${self:custom.resourcePrefix}
    INCOMING_COMMANDS_TOPIC_ARN:
      Ref: IncomingCommandsTopic
    EVENTS_TOPIC_ARN:
      Ref: EventsTopic

functions:
  Sample:
    handler: src/sample-function.handler
    events:
      - http: 'GET /sample'
  Sessions:
    handler: src/framework/sessions.handler
    events:
      - http: 'POST /sessions'
  WebsocketSessions:
    handler: src/framework/session-manager-ws.handler
    events:
      - websocket:
          routeKey: $connect
      - websocket:
          routeKey: $disconnect
  CommandReceiver:
    handler: src/framework/command-receiver.handler
    events:
      - http: 'POST /commands'
      - websocket:
          routeKey: $default
  CommandProcessor:
    handler: src/tic-tac-toe-command-processor.handler
    events:
      - sqs:
         arn:
           "Fn::GetAtt": [ CommandDispatchQueue, Arn ]


resources:
  Resources:
    AppBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        BucketName: ${self:custom.resourcePrefix}
        VersioningConfiguration:
          Status: Enabled
    IncomingCommandsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.resourcePrefix}-incoming-commands
        Subscription:
        - Endpoint:
            "Fn::GetAtt": [ CommandDispatchQueue, Arn ]
          Protocol: sqs
    EventsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.resourcePrefix}-events
    CommandDispatchQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.resourcePrefix}-command-dispatch
        ReceiveMessageWaitTimeSeconds: 20
    # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-iam.html#scenario-sqs-policy
    # and https://github.com/neillturner/cfndsl_examples/blob/master/IAM/IAM_Policies_SNS_Publish_To_SQS.yml
    CommandDispatchQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
        - Ref: CommandDispatchQueue
        PolicyDocument:
          Id: CommandDispatchQueuePolicy
          Version: '2012-10-17'
          Statement:
          - Sid: Allow-IncomingCommandsTopic-Send-To-CommandDispatchQueue
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
            - sqs:SendMessage
            Resource:
              "Fn::GetAtt": [CommandDispatchQueue, Arn]
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Ref: IncomingCommandsTopic